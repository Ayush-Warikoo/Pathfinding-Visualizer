[{"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\index.js":"1","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reportWebVitals.js":"2","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\App.js":"3","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\MainPage.js":"4","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\Header.js":"5","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\Cell.js":"6","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\index.js":"7","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\headerState.js":"8","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\action\\index.js":"9","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\finishCell.js":"10","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\startCell.js":"11","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\dijkstra.js":"12","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\bfs.js":"13","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\constants.js":"14","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\forceUpdate.js":"15","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\algorithms.js":"16"},{"size":1054,"mtime":1619836282639,"results":"17","hashOfConfig":"18"},{"size":419,"mtime":1619836282831,"results":"19","hashOfConfig":"18"},{"size":198,"mtime":1619836282349,"results":"20","hashOfConfig":"18"},{"size":2687,"mtime":1620357039579,"results":"21","hashOfConfig":"18"},{"size":8922,"mtime":1620357039489,"results":"22","hashOfConfig":"18"},{"size":4409,"mtime":1620357039338,"results":"23","hashOfConfig":"18"},{"size":419,"mtime":1619836282785,"results":"24","hashOfConfig":"18"},{"size":285,"mtime":1619836282764,"results":"25","hashOfConfig":"18"},{"size":568,"mtime":1619836281877,"results":"26","hashOfConfig":"18"},{"size":290,"mtime":1619836282721,"results":"27","hashOfConfig":"18"},{"size":285,"mtime":1619836282808,"results":"28","hashOfConfig":"18"},{"size":5293,"mtime":1619836282322,"results":"29","hashOfConfig":"18"},{"size":3539,"mtime":1619973555209,"results":"30","hashOfConfig":"18"},{"size":782,"mtime":1619973285021,"results":"31","hashOfConfig":"18"},{"size":284,"mtime":1619836282744,"results":"32","hashOfConfig":"18"},{"size":1881,"mtime":1620357039118,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"d6xvn7",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\index.js",[],["69","70"],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\App.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\MainPage.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\Header.js",["71"],"import React, { useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { headerSelect } from \"./action/index\";\r\nimport algorithmManager from \"./algorithms/algorithms\";\r\nimport {\r\n    CELL_WALL_STATE,\r\n    FINISH_STATE,\r\n    START_STATE,\r\n    WEIGHT_ONE_STATE,\r\n    WEIGHT_TWO_STATE,\r\n    BORDER_WALL_STATE,\r\n    WALLS_TITLE,\r\n    WEIGHTS_TITLE,\r\n    PATH_CELLS_TITLE,\r\n    NO_STATE,\r\n} from \"./constants\";\r\n\r\nfunction Header({ grid, clear, updateCell, unanimateGrid }) {\r\n    const [algorithm, setAlgorithm] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    let headerState = useSelector((state) => state.headerState);\r\n\r\n    const setSelectedTitleClass = (title) => {\r\n        if (\r\n            ((headerState === START_STATE || headerState === FINISH_STATE) &&\r\n                title === PATH_CELLS_TITLE) ||\r\n            ((headerState === CELL_WALL_STATE || headerState === BORDER_WALL_STATE) &&\r\n                title === WALLS_TITLE) ||\r\n            ((headerState === WEIGHT_ONE_STATE || headerState === WEIGHT_TWO_STATE) &&\r\n                title === WEIGHTS_TITLE)\r\n        ) {\r\n            return \" Header__SelectedTitle\";\r\n        }\r\n        return \" Header__NotSelectedTitle\";\r\n    };\r\n\r\n    const setSelectedStateClass = (cell) => {\r\n        if (cell === headerState) {\r\n            return \" Header__SelectedState\";\r\n        }\r\n        return \" Header__NotSelectedState\";\r\n    };\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            <div className=\"Header__Top\">\r\n                <div className=\"Header__ClearBoard\">\r\n                    <button onClick={clear}> Clear Board </button>\r\n                </div>\r\n                <div className=\"Header__GenerateBoard\">\r\n                    <button /*onClick={clear}*/>Generate Random Board </button>\r\n                </div>\r\n                <div className=\"Header__Title\">\r\n                    <h1 style={{ color: \"rgb(35,109,187)\" }}> Pathfinding Visualizer </h1>\r\n                </div>\r\n                <div className=\"Header__Algorithms\">\r\n                    <select type=\"diet\" onChange={(e) => setAlgorithm(e.target.value)}>\r\n                        <option className=\"default\" selected disabled hidden>\r\n                            Pick an Algorithm!\r\n                        </option>\r\n                        <option className=\"Bfs\"> Bfs </option>\r\n                        <option className=\"Dijkstra\"> Dijkstra </option>\r\n                    </select>\r\n                </div>\r\n                <div className=\"Header__RunProgram\">\r\n                    <button\r\n                        disabled={!algorithm}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return algorithmManager(grid, algorithm, updateCell);\r\n                        }}\r\n                    >\r\n                        {!algorithm ? `Pick an Algorithm!` : `Run ${algorithm}`}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Header__Bottom\">\r\n                <div className={\"Header__PathCells\" + setSelectedTitleClass(PATH_CELLS_TITLE)}>\r\n                    <div className=\"Header__PathCellsTitle\">\r\n                        <h2> Path Cells </h2>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__StartCell\" + setSelectedStateClass(START_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(START_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Start Cell </h3>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__FinishCell\" + setSelectedStateClass(FINISH_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(FINISH_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Finish Cell </h3>\r\n                    </div>\r\n                </div>\r\n                <div className={\"Header__Walls\" + setSelectedTitleClass(WALLS_TITLE)}>\r\n                    <div className=\"Header__WallsTitle\">\r\n                        <h2> Walls </h2>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__CellWall\" + setSelectedStateClass(CELL_WALL_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(CELL_WALL_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Block Wall </h3>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__BorderWall\" + setSelectedStateClass(BORDER_WALL_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(BORDER_WALL_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Border Wall </h3>\r\n                        <div>\r\n                            <div\r\n                                className={\"Header__TopWall\"}\r\n                                style={{\r\n                                    border: \"1px black solid\",\r\n                                    height: \"20px\",\r\n                                    width: \"20px\",\r\n                                    display: \"inline-block\",\r\n                                }}\r\n                                onClick={() => {\r\n                                    return dispatch(headerSelect(BORDER_WALL_STATE));\r\n                                }}\r\n                            ></div>\r\n                            <div\r\n                                className={\"Header__RightWall\"}\r\n                                style={{\r\n                                    border: \"1px black solid\",\r\n                                    height: \"20px\",\r\n                                    width: \"20px\",\r\n                                    display: \"inline-block\",\r\n                                }}\r\n                                onClick={() => {\r\n                                    return dispatch(headerSelect(BORDER_WALL_STATE));\r\n                                }}\r\n                            ></div>\r\n                            <div\r\n                                className={\"Header__BottomWall\"}\r\n                                style={{\r\n                                    border: \"1px black solid\",\r\n                                    height: \"20px\",\r\n                                    width: \"20px\",\r\n                                    display: \"inline-block\",\r\n                                }}\r\n                                onClick={() => {\r\n                                    return dispatch(headerSelect(BORDER_WALL_STATE));\r\n                                }}\r\n                            ></div>\r\n                            <div\r\n                                className={\"Header__LeftWall\"}\r\n                                style={{\r\n                                    border: \"1px black solid\",\r\n                                    height: \"20px\",\r\n                                    width: \"20px\",\r\n                                    display: \"inline-block\",\r\n                                }}\r\n                                onClick={() => {\r\n                                    return dispatch(headerSelect(BORDER_WALL_STATE));\r\n                                }}\r\n                            ></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={\"Header__Weights\" + setSelectedTitleClass(WEIGHTS_TITLE)}>\r\n                    <div className=\"Header__WeightsTitle\">\r\n                        <h2> Weights </h2>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__WeightOne\" + setSelectedStateClass(WEIGHT_ONE_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(WEIGHT_ONE_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Weight One </h3>\r\n                    </div>\r\n                    <div\r\n                        className={\"Header__WeightTwo\" + setSelectedStateClass(WEIGHT_TWO_STATE)}\r\n                        onClick={() => {\r\n                            unanimateGrid();\r\n                            return dispatch(headerSelect(WEIGHT_TWO_STATE));\r\n                        }}\r\n                    >\r\n                        <h3> Weight Two </h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\Cell.js",["72"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Cell.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setStart, setFinish } from \"./action/index\";\r\nimport { CELL_WALL_STATE, WEIGHT_ONE_STATE, WEIGHT_TWO_STATE, NO_STATE } from \"./constants\";\r\n\r\nconst Cell = React.memo(\r\n    ({ cellProp, updateCell }) => {\r\n        //Store Values\r\n        let headerState = useSelector((state) => state.headerState);\r\n        let startCellCoord = useSelector((state) => state.startCell);\r\n        let finishCellCoord = useSelector((state) => state.finishCell);\r\n\r\n        //Helper functions\r\n        const isStartCell = () => {\r\n            return cellProp.row === startCellCoord[0] && cellProp.col === startCellCoord[1];\r\n        };\r\n\r\n        const isFinishCell = () => {\r\n            return cellProp.row === finishCellCoord[0] && cellProp.col === finishCellCoord[1];\r\n        };\r\n\r\n        //States\r\n        const [startCell, setStartCell] = useState(isStartCell());\r\n        const [finishCell, setFinishCell] = useState(isFinishCell());\r\n        const dispatch = useDispatch();\r\n\r\n        //Event handling functions\r\n        const handleUpdatingCellState = (state) => {\r\n            if (cellProp.state === state) {\r\n                cellProp.state = NO_STATE;\r\n                updateCell(cellProp);\r\n            } else if (!startCell && !finishCell) {\r\n                cellProp.state = state;\r\n                updateCell(cellProp);\r\n            }\r\n        };\r\n\r\n        useEffect(() => {\r\n            if (startCell && !isStartCell()) {\r\n                setStartCell(false);\r\n            } else if (finishCell && !isFinishCell()) {\r\n                setFinishCell(false);\r\n            }\r\n        }, [startCellCoord, finishCellCoord]);\r\n\r\n        const onMouseDown = (e) => {\r\n            if (\r\n                e.buttons === 1 &&\r\n                (headerState === CELL_WALL_STATE ||\r\n                    headerState === WEIGHT_ONE_STATE ||\r\n                    headerState === WEIGHT_TWO_STATE)\r\n            ) {\r\n                handleUpdatingCellState(headerState);\r\n            }\r\n        };\r\n\r\n        const onMouseEnter = (e) => {\r\n            if (\r\n                e.buttons === 1 &&\r\n                (headerState === CELL_WALL_STATE ||\r\n                    headerState === WEIGHT_ONE_STATE ||\r\n                    headerState === WEIGHT_TWO_STATE)\r\n            ) {\r\n                handleUpdatingCellState(headerState);\r\n            }\r\n        };\r\n\r\n        const onMouseUp = (e) => {\r\n            if (headerState === \"Start\" && !finishCell) {\r\n                setStartCell(true);\r\n                dispatch(setStart([cellProp.row, cellProp.col]));\r\n            } else if (headerState === \"Finish\" && !startCell) {\r\n                setFinishCell(true);\r\n                dispatch(setFinish([cellProp.row, cellProp.col]));\r\n            }\r\n        };\r\n\r\n        //Regular functions\r\n        const setStateClass = () => {\r\n            if (startCell) {\r\n                return \" Cell__Start\";\r\n            } else if (finishCell) {\r\n                return \" Cell__Finish\";\r\n            }\r\n            return \" Cell__\" + cellProp.state;\r\n        };\r\n\r\n        const setVisitedClass = () => {\r\n            if (cellProp.visited) {\r\n                return \" Cell__Visited\";\r\n            }\r\n            return \" Cell__NotVisited\";\r\n        };\r\n\r\n        const setPathClass = () => {\r\n            if (cellProp.path) {\r\n                return \" Cell__Path\";\r\n            }\r\n            return \" Cell__NotPath\";\r\n        };\r\n\r\n        const setBorderWallClass = () => {\r\n            let str = \"\";\r\n            for (let i = 0; i < cellProp.length; i++) {\r\n                str += \" Cell__\" + cellProp[i] + \"Wall\";\r\n            }\r\n            return str;\r\n        };\r\n\r\n        return (\r\n            <div\r\n                className={\r\n                    \"Cell \" +\r\n                    setStateClass() +\r\n                    setVisitedClass() +\r\n                    setPathClass() +\r\n                    setBorderWallClass()\r\n                }\r\n                onMouseDown={onMouseDown}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseUp={onMouseUp}\r\n            ></div>\r\n        );\r\n    },\r\n    (prevProps, nextProps) => {\r\n        if (prevProps.cellProp === nextProps.cellProp) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n);\r\n\r\nexport default Cell;\r\n","C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\index.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\headerState.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\action\\index.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\finishCell.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\startCell.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\bfs.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\constants.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\reducer\\forceUpdate.js",[],"C:\\Users\\ayush\\OneDrive - University of Waterloo\\Desktop\\Pathfinding Visualizer Project\\pathfinding-visualizer\\src\\algorithms\\algorithms.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":16,"column":5,"nodeType":"79","messageId":"80","endLine":16,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":44,"column":8,"nodeType":"83","endLine":44,"endColumn":41,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'NO_STATE' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'finishCell', 'isFinishCell', 'isStartCell', and 'startCell'. Either include them or remove the dependency array.","ArrayExpression",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [startCellCoord, finishCellCoord, startCell, isStartCell, finishCell, isFinishCell]",{"range":"90","text":"91"},[1589,1622],"[startCellCoord, finishCellCoord, startCell, isStartCell, finishCell, isFinishCell]"]